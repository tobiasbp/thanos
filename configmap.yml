apiVersion: v1 
kind: ConfigMap 
metadata:
  name: prom-config
  namespace: monitoring
data:
  prometheus.yml.tmpl: |
    # my global config from ConfigMap
    global:
      scrape_interval:     15s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
      evaluation_interval: 15s # Evaluate rules every 15 seconds. The default is every 1 minute.
      # scrape_timeout is set to the global default (10s).
      external_labels:
        cluster: prometheus-ha
        # Each Prometheus has to have unique labels.
        replica: $(POD_NAME)
    
    # Alertmanager configuration
    #alerting:
    #  # We want our alerts to be deduplicated
    #  # from different replicas.
    #  alert_relabel_configs:
    #  - regex: replica
    #    action: labeldrop
    #  alertmanagers:
    #  - static_configs:
    #    - targets:
    #      - prometheus-am-svc:9093
    
    # Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
    rule_files:
      - /etc/prometheus/rules/*rules.yml
      #- "*rules.yml"
      #- "first_rules.yml"
      # - "second_rules.yml"
      # - "third_rules.yml"
    
    # A scrape configuration containing exactly one endpoint to scrape:
    # Here it's Prometheus itself.
    scrape_configs:
      # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
      - job_name: 'prometheus'
        
        # metrics_path defaults to '/metrics'
        # scheme defaults to 'http'.
        
        static_configs:
        - targets: ['localhost:9090']
      
      #- job_name: 'federate'
      #  metrics_path: /federate
      #  honor_labels: true
      #  params:
      #    'match[]':
      #      - '{job="name_of_job_to_read"}'
      #  static_configs:
      #    - targets:
      #      - my-other-prometheus:9090
---
apiVersion: v1 
kind: ConfigMap 
metadata:
  name: prom-rules
  namespace: monitoring
data:
  first_rules.yml: |
    groups:
    - name: alert_rules
      rules:
      # Instance down
      - alert: InstanceDown
        expr: up == 0
        for: 120s
        labels:
          severity: "critical"
        annotations:
          summary: "Endpoint {{ $labels.instance }} down"
